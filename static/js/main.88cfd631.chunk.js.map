{"version":3,"sources":["components/icon/icon.js","components/pad/pad.js","utils/storage-utils.js","utils/time-utils.js","components/device/device-modes.js","components/device/device.js","components/sign/sign.js","containers/app/app.js","serviceWorker.js","index.js"],"names":["Icon","_ref","type","inactive","react_default","a","createElement","className","concat","index_es","icon","Pad","onClick","children","storage","getMode","localStorage","getItem","setMode","value","setItem","getCurrent","setCurrent","getTotal","setTotal","getStartTime","setStartTime","format","val","MODES","stop","play","pause","Time","delimiter","hideSeconds","_fromMs","milliseconds","fullSeconds","Math","floor","seconds","fullMinutes","minutes","hours","fromMs","Display","_ref2","current","total","showDelimiter","mode","icon_icon","device_Time","Device","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tick","diffTime","startTime","nowTime","Date","now","setState","prevState","time","onStartPause","intervalId","clearInterval","setInterval","onReset","_this$state","state","_this$state2","device_Display","pad_pad","React","Component","Sign","href","target","App","device_device","sign_sign","Boolean","window","location","hostname","match","library","add","faPlay","faPause","faStop","ReactDOM","render","app_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88cfd631.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './icon.css';\r\n\r\nconst Icon = ({type, inactive}) => (\r\n    <span className={`icon ${inactive ? \" indicator-inactive\" : \"\"}`}>\r\n        <FontAwesomeIcon icon={type} />\r\n    </span>\r\n);\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\nimport './pad.css';\r\n\r\nconst Pad = ({ onClick, children, className }) => (\r\n    <div className={`pad ${className || ''}`} onClick={onClick}>\r\n        {children}\r\n    </div>\r\n);\r\n\r\nexport default Pad;","export const storage = {\r\n  getMode: () => +localStorage.getItem('mode') || 0,\r\n  setMode: value => localStorage.setItem('mode', value),\r\n  getCurrent: () => +localStorage.getItem('current') || 0,\r\n  setCurrent: value => localStorage.setItem('current', value),\r\n  getTotal: () => +localStorage.getItem('total') || 0,\r\n  setTotal: value => localStorage.setItem('total', value),\r\n  getStartTime: () => +localStorage.getItem('start-time') || 0,\r\n  setStartTime: value => localStorage.setItem('start-time', value)\r\n}","export const format = val => {\r\n  if (val < 10) return '0' + val;\r\n  return val;\r\n}\r\n\r\nexport const fromMs = milliseconds => {\r\n  const fullSeconds = Math.floor(milliseconds / 1000);\r\n  const seconds = fullSeconds % 60;\r\n  const fullMinutes = Math.floor(fullSeconds / 60); \r\n  const minutes = fullMinutes % 60;\r\n  const hours = Math.floor(fullMinutes / 60);\r\n  \r\n  return {hours, minutes, seconds};\r\n}\r\n","export const MODES = {\r\n  stop: 0,\r\n  play: 1,\r\n  pause: 2\r\n};","import React, { Component } from 'react';\r\nimport Icon from '../icon/icon';\r\nimport Pad from '../pad/pad';\r\nimport { storage } from '../../utils/storage-utils';\r\nimport { format, fromMs } from '../../utils/time-utils';\r\nimport { MODES } from './device-modes';\r\nimport './device.css';\r\n\r\nconst SPACE = 32;\r\n\r\nconst Time = ({value, className, delimiter, hideSeconds}) => {\r\n  const { hours, minutes, seconds } = fromMs(value);\r\n\r\n  return (\r\n    <span className={className}>\r\n      {format(hours)}\r\n      {delimiter ? ':' : ' '}\r\n      {format(minutes)}\r\n      {!hideSeconds && <span>{delimiter ? ':' : ' '}\r\n      {format(seconds)}</span>}\r\n    </span>\r\n  );\r\n}\r\n\r\nconst Display = ({current, total, showDelimiter, mode}) => (\r\n  <div className=\"display-wrapper\">\r\n    <span className=\"indicators-total-wrapper\">\r\n      <span className=\"indicators-wrapper\">\r\n        <Icon type=\"play\" inactive={mode != MODES.play} />\r\n        <Icon type=\"pause\" inactive={mode != MODES.pause} />\r\n        <Icon type=\"stop\" inactive={mode != MODES.stop} />\r\n      </span>\r\n      <Time delimiter hideSeconds className=\"display-total\" value={total} />\r\n    </span>\r\n    <Time delimiter={showDelimiter} className=\"display-current\" value={current} />\r\n  </div>\r\n);\r\n\r\nclass Device extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showDelimiter: true,\r\n      intervalId: null    \r\n    };\r\n  }\r\n  /*\r\n  handleKeyDown = e => {\r\n    if (e.keyCode != SPACE || this.state.pressed) return;\r\n    this.props.onClick && this.props.onClick();\r\n    this.setState({pressed: true});\r\n  };\r\n  \r\n  handleKeyUp = e => {\r\n    if (e.keyCode != SPACE) return;\r\n    this.setState({pressed: false});\r\n  };\r\n  \r\n  componentDidMount() {\r\n    document.addEventListener('keydown', this.handleKeyDown);\r\n    document.addEventListener('keyup', this.handleKeyUp);\r\n  };\r\n  */\r\n  componentDidMount() {\r\n    const mode = storage.getMode();\r\n    let diffTime = 0;\r\n    let intervalId = null;\r\n    if (mode == MODES.play) {\r\n      const startTime = storage.getStartTime();\r\n      const nowTime = Date.now();\r\n      diffTime = nowTime - startTime;\r\n      intervalId = setInterval(this.tick, 500);\r\n    }\r\n    \r\n    this.setState({\r\n      mode: storage.getMode(),\r\n      time: storage.getCurrent() + diffTime,\r\n      total: storage.getTotal() + diffTime,\r\n      intervalId\r\n    });\r\n  }\r\n  \r\n  tick = () => {\r\n    let diffTime = 0;\r\n    const startTime = storage.getStartTime();\r\n    const nowTime = Date.now();\r\n    diffTime = nowTime - startTime;\r\n    \r\n    this.setState(prevState => {\r\n      const { showDelimiter, time, total } = prevState;\r\n      return {\r\n        showDelimiter: !showDelimiter,\r\n        time: storage.getCurrent() + diffTime,\r\n        total: storage.getTotal() + diffTime\r\n      };\r\n    });\r\n  }\r\n\r\n  onStartPause = () => {\r\n    this.setState(prevState => {\r\n      const { mode, intervalId, time, total } = prevState; \r\n      const isRun = mode == MODES.play; \r\n      if (isRun) {\r\n        clearInterval(intervalId);\r\n        storage.setMode(MODES.pause);\r\n        storage.setCurrent(time);\r\n        storage.setTotal(total);\r\n        return {\r\n          mode: MODES.pause,\r\n          intervalId: null,\r\n          showDelimiter: true\r\n        };\r\n      } else {\r\n        const intervalId = setInterval(this.tick, 500);\r\n        storage.setStartTime(Date.now());\r\n        storage.setMode(MODES.play);\r\n        return { \r\n          mode: MODES.play,\r\n          intervalId\r\n        };  \r\n      }\r\n    });\r\n  }\r\n  \r\n  onReset = () => {\r\n    const { intervalId, total, time } = this.state;\r\n    clearInterval(intervalId);\r\n    storage.setTotal(total);\r\n    storage.setCurrent(0);\r\n    storage.setMode(MODES.stop);\r\n    this.setState({\r\n      time: 0,\r\n      mode: MODES.stop,\r\n      intervalId: null\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    const { showDelimiter, time, total, mode } = this.state;\r\n    return (\r\n      <div className=\"device\">\r\n        <Display \r\n          mode={mode}\r\n          showDelimiter={showDelimiter}\r\n          current={time} \r\n          total={total} \r\n          />\r\n        <Pad className='pad-start-pause' onClick={this.onStartPause}>\r\n          <span><Icon type=\"play\" />START</span>\r\n          <span><Icon type=\"pause\" />PAUSE</span>\r\n        </Pad>\r\n        <Pad className='pad-reset' onClick={this.onReset}>\r\n          <span><Icon type=\"stop\" />RESET</span>\r\n        </Pad>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Device;","import React from 'react';\r\nimport './sign.css';\r\n\r\nconst Sign = () => (\r\n  <div className=\"sign-wrapper\">\r\n    <span className=\"sign-title\">Designed & coded by</span>\r\n    <a href=\"https://codepen.io/Dimancmc/full/vaVJBj\" target=\"_blank\" className=\"sign-link\">\r\n        Lytov Dmitry\r\n    </a>\r\n  </div>\r\n);\r\n\r\nexport default Sign;","import React, { Component } from 'react';\nimport './app.css';\nimport Device from '../../components/device/device';\nimport Sign from '../../components/sign/sign';\n\nconst App = () => (\n  <div className=\"app\">\n    <Device />\n    <Sign />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/app/app';\nimport * as serviceWorker from './serviceWorker';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faPlay, faPause, faStop } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faPlay, faPause, faStop);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}