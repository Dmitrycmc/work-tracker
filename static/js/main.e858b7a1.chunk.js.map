{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Food","react_default","a","createElement","index_es","icon","Sign","className","href","target","App_Food","storage","getMode","localStorage","getItem","MODES","stop","setMode","value","setItem","getCurrent","setCurrent","getTotal","setTotal","getStartTime","setStartTime","play","pause","format","val","Icon","_ref","type","inactive","concat","Time","_ref2","delimiter","hideSeconds","_fromMs","milliseconds","fullSeconds","Math","floor","seconds","fullMinutes","minutes","hours","fromMs","Display","_ref3","current","total","showDelimiter","mode","App_Icon","App_Time","Pad","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","onClick","children","React","Component","Device","_this","tick","diffTime","startTime","nowTime","Date","now","setState","prevState","time","onStartPause","intervalId","clearInterval","setInterval","onReset","_this$state","state","_this$state2","App_Display","App_Pad","App","App_Device","App_Sign","Boolean","window","location","hostname","match","library","add","faIgloo","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e858b7a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nexport const Food = () => (\n  <div>\n    Favorite Food: <FontAwesomeIcon icon=\"igloo\" />\n  </div>\n)\n\nconst Sign = () => (\n  <div className=\"sign-wrapper\">\n    <span className=\"sign-title\">Designed & coded by</span>\n    <a href=\"https://codepen.io/Dimancmc/full/vaVJBj\" target=\"_blank\" className=\"sign-link\">\n        Lytov Dmitry\n    </a><Food />\n  </div>\n);\n\nconst storage = {\n  getMode: () => +localStorage.getItem('mode') || MODES.stop,\n  setMode: value => localStorage.setItem('mode', value),\n  getCurrent: () => +localStorage.getItem('current') || 0,\n  setCurrent: value => localStorage.setItem('current', value),\n  getTotal: () => +localStorage.getItem('total') || 0,\n  setTotal: value => localStorage.setItem('total', value),\n  getStartTime: () => +localStorage.getItem('start-time') || 0,\n  setStartTime: value => localStorage.setItem('start-time', value)\n}\n\nconst MODES = {\n  stop: 0,\n  play: 1,\n  pause: 2\n};\n\nconst SPACE = 32;\n\nconst format = val => {\n  if (val < 10) return '0' + val;\n  return val;\n}\n\nconst Icon = ({type, inactive}) => (\n  <i className={`fas fa-${type} icon ${inactive ? 'indicator-inactive' : ''}`} />\n);\n\nconst fromMs = milliseconds => {\n  const fullSeconds = Math.floor(milliseconds / 1000);\n  const seconds = fullSeconds % 60;\n  const fullMinutes = Math.floor(fullSeconds / 60); \n  const minutes = fullMinutes % 60;\n  const hours = Math.floor(fullMinutes / 60);\n  \n  return {hours, minutes, seconds};\n}\n\nconst Time = ({value, className, delimiter, hideSeconds}) => {\n  const { hours, minutes, seconds } = fromMs(value);\n\n  return (\n    <span className={className}>\n      {format(hours)}\n      {delimiter ? ':' : ' '}\n      {format(minutes)}\n      {!hideSeconds && <span>{delimiter ? ':' : ' '}\n      {format(seconds)}</span>}\n    </span>\n  );\n}\n\nconst Display = ({current, total, showDelimiter, mode}) => (\n  <div className=\"display-wrapper\">\n    <span className=\"indicators-total-wrapper\">\n      <span className=\"indicators-wrapper\">\n        <Icon type=\"play\" inactive={mode != MODES.play} />\n        <Icon type=\"pause\" inactive={mode != MODES.pause} />\n        <Icon type=\"stop\" inactive={mode != MODES.stop} />\n      </span>\n      <Time delimiter hideSeconds className=\"display-total\" value={total} />\n    </span>\n    <Time delimiter={showDelimiter} className=\"display-current\" value={current} />\n  </div>\n);\n\nclass Pad extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { onClick, children, className } = this.props;\n    return (\n      <div className={`pad ${className || ''}`} onClick={onClick}>{children}</div>\n    );\n  };\n}\n\nclass Device extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showDelimiter: true,\n      intervalId: null    \n    };\n  }\n  /*\n  handleKeyDown = e => {\n    if (e.keyCode != SPACE || this.state.pressed) return;\n    this.props.onClick && this.props.onClick();\n    this.setState({pressed: true});\n  };\n  \n  handleKeyUp = e => {\n    if (e.keyCode != SPACE) return;\n    this.setState({pressed: false});\n  };\n  \n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown);\n    document.addEventListener('keyup', this.handleKeyUp);\n  };\n  */\n  componentDidMount() {\n    const mode = storage.getMode();\n    let diffTime = 0;\n    let intervalId = null;\n    if (mode == MODES.play) {\n      const startTime = storage.getStartTime();\n      const nowTime = Date.now();\n      diffTime = nowTime - startTime;\n      intervalId = setInterval(this.tick, 500);\n    }\n    \n    this.setState({\n      mode: storage.getMode(),\n      time: storage.getCurrent() + diffTime,\n      total: storage.getTotal() + diffTime,\n      intervalId\n    });\n  }\n  \n  tick = () => {\n    let diffTime = 0;\n    const startTime = storage.getStartTime();\n    const nowTime = Date.now();\n    diffTime = nowTime - startTime;\n    \n    this.setState(prevState => {\n      const { showDelimiter, time, total } = prevState;\n      return {\n        showDelimiter: !showDelimiter,\n        time: storage.getCurrent() + diffTime,\n        total: storage.getTotal() + diffTime\n      };\n    });\n  }\n\n  onStartPause = () => {\n    this.setState(prevState => {\n      const { mode, intervalId, time, total } = prevState; \n      const isRun = mode == MODES.play; \n      if (isRun) {\n        clearInterval(intervalId);\n        storage.setMode(MODES.pause);\n        storage.setCurrent(time);\n        storage.setTotal(total);\n        return {\n          mode: MODES.pause,\n          intervalId: null,\n          showDelimiter: true\n        };\n      } else {\n        const intervalId = setInterval(this.tick, 500);\n        storage.setStartTime(Date.now());\n        storage.setMode(MODES.play);\n        return { \n          mode: MODES.play,\n          intervalId\n        };  \n      }\n    });\n  }\n  \n  onReset = () => {\n    const { intervalId, total, time } = this.state;\n    clearInterval(intervalId);\n    storage.setTotal(total);\n    storage.setCurrent(0);\n    storage.setMode(MODES.stop);\n    this.setState({\n      time: 0,\n      mode: MODES.stop,\n      intervalId: null\n    });\n  }\n  \n  render() {\n    const { showDelimiter, time, total, mode } = this.state;\n    return (\n      <div className=\"device\">\n        <Display \n          mode={mode}\n          showDelimiter={showDelimiter}\n          current={time} \n          total={total} \n          />\n        <Pad className='pad-start-pause' onClick={this.onStartPause}>\n          <span><Icon type=\"play\" />START</span>\n          <span><Icon type=\"pause\" />PAUSE</span>\n        </Pad>\n        <Pad className='pad-reset' onClick={this.onReset}>\n          <span><Icon type=\"stop\" />RESET</span>\n        </Pad>\n      </div>\n    );\n  }\n}\n\nconst App = () => (\n  <div className=\"app\">\n    <Device />\n    <Sign />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faIgloo } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faIgloo);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}