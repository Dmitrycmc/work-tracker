{"version":3,"sources":["components/icon/icon.js","components/pad/pad.js","utils/storage-utils.js","components/device/device-modes.js","utils/time-utils.js","components/time/time.js","components/display/display.js","components/device/device.js","components/sign/sign.js","containers/app/app.js","serviceWorker.js","index.js"],"names":["Icon","_ref","type","inactive","react_default","a","createElement","className","concat","index_es","icon","PadTemplate","onClick","children","PadWithKey","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyDown","e","keyCode","pressed","state","setState","handleKeyUp","_this$props","document","addEventListener","removeEventListener","_this$props2","pad_PadTemplate","Component","Pad","_ref2","rest","objectWithoutProperties","pad_PadWithKey","assign","storage","getMode","localStorage","getItem","setMode","value","setItem","getCurrent","setCurrent","getTotal","setTotal","getStartTime","setStartTime","MODES","stop","play","pause","format","val","Time","delimiter","hideSeconds","_fromMs","milliseconds","fullSeconds","Math","floor","seconds","fullMinutes","minutes","hours","fromMs","Display","current","total","showDelimiter","mode","icon_icon","time_Time","Device","tick","diffTime","startTime","nowTime","Date","now","prevState","time","onStartPause","intervalId","clearInterval","setInterval","onReset","_this$state","_this$state2","display_Display","pad_pad","Sign","href","target","App","device_device","sign_sign","Boolean","window","location","hostname","match","library","add","faPlay","faPause","faStop","ReactDOM","render","app_app","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4765ea7e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './icon.css';\r\n\r\nconst Icon = ({type, inactive}) => (\r\n    <span className={`icon ${inactive ? \" indicator-inactive\" : \"\"}`}>\r\n        <FontAwesomeIcon icon={type} />\r\n    </span>\r\n);\r\n\r\nexport default Icon;\r\n","import React, {Component} from 'react';\r\nimport './pad.css';\r\n\r\nconst PadTemplate = ({ onClick, children, className }) => {\r\n    return (\r\n        <div className={`pad ${className || ''}`} onClick={onClick}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nclass PadWithKey extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        }\r\n    }\r\n\r\n    handleKeyDown = e => {\r\n        const { keyCode } = this.props;\r\n        const { pressed } = this.state;\r\n\r\n        if (e.keyCode != keyCode || pressed) return;\r\n        this.setState({pressed: true});\r\n    };\r\n\r\n    handleKeyUp = e => {\r\n        const { keyCode, onClick } = this.props;\r\n        if (e.keyCode != keyCode) return;\r\n        this.setState({pressed: false});\r\n        onClick && onClick();\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.handleKeyDown);\r\n        document.addEventListener('keyup', this.handleKeyUp);\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keydown', this.handleKeyDown);\r\n        document.removeEventListener('keyup', this.handleKeyUp);\r\n    };\r\n\r\n    render() {\r\n        const { onClick, children, className } = this.props;\r\n        const { pressed } = this.state;\r\n        return (\r\n            <PadTemplate\r\n                onClick={onClick}\r\n                children={children}\r\n                className={`${className} ${pressed ? 'pressed' : 0}`}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst Pad = ({ keyCode, ...rest }) => (\r\n    keyCode\r\n    ? <PadWithKey keyCode={keyCode} {...rest} />\r\n    : <PadTemplate {...rest} />\r\n);\r\n\r\nexport default Pad;","export const storage = {\r\n  getMode: () => +localStorage.getItem('mode') || 0,\r\n  setMode: value => localStorage.setItem('mode', value),\r\n  getCurrent: () => +localStorage.getItem('current') || 0,\r\n  setCurrent: value => localStorage.setItem('current', value),\r\n  getTotal: () => +localStorage.getItem('total') || 0,\r\n  setTotal: value => localStorage.setItem('total', value),\r\n  getStartTime: () => +localStorage.getItem('start-time') || 0,\r\n  setStartTime: value => localStorage.setItem('start-time', value)\r\n}","export const MODES = {\r\n  stop: 0,\r\n  play: 1,\r\n  pause: 2\r\n};","export const format = val => {\r\n  if (val < 10) return '0' + val;\r\n  return val;\r\n}\r\n\r\nexport const fromMs = milliseconds => {\r\n  const fullSeconds = Math.floor(milliseconds / 1000);\r\n  const seconds = fullSeconds % 60;\r\n  const fullMinutes = Math.floor(fullSeconds / 60); \r\n  const minutes = fullMinutes % 60;\r\n  const hours = Math.floor(fullMinutes / 60);\r\n  \r\n  return {hours, minutes, seconds};\r\n}\r\n","import {format, fromMs} from \"../../utils/time-utils\";\r\nimport React from \"react\";\r\n\r\nexport const Time = ({value, className, delimiter, hideSeconds}) => {\r\n    const {hours, minutes, seconds} = fromMs(value);\r\n\r\n    return (\r\n        <span className={className}>\r\n      {format(hours)}\r\n            {delimiter ? ':' : ' '}\r\n            {format(minutes)}\r\n            {!hideSeconds && <span>{delimiter ? ':' : ' '}\r\n                {format(seconds)}</span>}\r\n    </span>\r\n    );\r\n}","import React from \"react\";\r\nimport Icon from \"../icon/icon\";\r\nimport {MODES} from \"../device/device-modes\";\r\nimport {Time} from \"../time/time\";\r\nimport './display.css';\r\n\r\nexport const Display = ({current, total, showDelimiter, mode}) => (\r\n    <div className=\"display-wrapper\">\r\n    <span className=\"indicators-total-wrapper\">\r\n      <span className=\"indicators-wrapper\">\r\n        <Icon type=\"play\" inactive={mode != MODES.play}/>\r\n        <Icon type=\"pause\" inactive={mode != MODES.pause}/>\r\n        <Icon type=\"stop\" inactive={mode != MODES.stop}/>\r\n      </span>\r\n      <Time delimiter hideSeconds className=\"display-total\" value={total}/>\r\n    </span>\r\n        <Time delimiter={showDelimiter} className=\"display-current\" value={current}/>\r\n    </div>\r\n);","import React, {Component} from 'react';\r\nimport Icon from '../icon/icon';\r\nimport Pad from '../pad/pad';\r\nimport {storage} from '../../utils/storage-utils';\r\nimport {MODES} from './device-modes';\r\nimport './device.css';\r\nimport {Display} from \"../display/display\";\r\n\r\nconst SPACE_CODE = 32;\r\n\r\nclass Device extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showDelimiter: true,\r\n      intervalId: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const mode = storage.getMode();\r\n    let diffTime = 0;\r\n    let intervalId = null;\r\n    if (mode == MODES.play) {\r\n      const startTime = storage.getStartTime();\r\n      const nowTime = Date.now();\r\n      diffTime = nowTime - startTime;\r\n      intervalId = setInterval(this.tick, 500);\r\n    }\r\n    \r\n    this.setState({\r\n      mode: storage.getMode(),\r\n      time: storage.getCurrent() + diffTime,\r\n      total: storage.getTotal() + diffTime,\r\n      intervalId\r\n    });\r\n  }\r\n  \r\n  tick = () => {\r\n    let diffTime = 0;\r\n    const startTime = storage.getStartTime();\r\n    const nowTime = Date.now();\r\n    diffTime = nowTime - startTime;\r\n    \r\n    this.setState(prevState => {\r\n      const { showDelimiter, time, total } = prevState;\r\n      return {\r\n        showDelimiter: !showDelimiter,\r\n        time: storage.getCurrent() + diffTime,\r\n        total: storage.getTotal() + diffTime\r\n      };\r\n    });\r\n  }\r\n\r\n  onStartPause = () => {\r\n    this.setState(prevState => {\r\n      const { mode, intervalId, time, total } = prevState; \r\n      const isRun = mode == MODES.play; \r\n      if (isRun) {\r\n        clearInterval(intervalId);\r\n        storage.setMode(MODES.pause);\r\n        storage.setCurrent(time);\r\n        storage.setTotal(total);\r\n        return {\r\n          mode: MODES.pause,\r\n          intervalId: null,\r\n          showDelimiter: true\r\n        };\r\n      } else {\r\n        const intervalId = setInterval(this.tick, 500);\r\n        storage.setStartTime(Date.now());\r\n        storage.setMode(MODES.play);\r\n        return { \r\n          mode: MODES.play,\r\n          intervalId\r\n        };  \r\n      }\r\n    });\r\n  }\r\n  \r\n  onReset = () => {\r\n    const { intervalId, total, time } = this.state;\r\n    clearInterval(intervalId);\r\n    storage.setTotal(total);\r\n    storage.setCurrent(0);\r\n    storage.setMode(MODES.stop);\r\n    this.setState({\r\n      time: 0,\r\n      mode: MODES.stop,\r\n      intervalId: null\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    const { showDelimiter, time, total, mode } = this.state;\r\n    return (\r\n      <div className=\"device\">\r\n        <Display \r\n          mode={mode}\r\n          showDelimiter={showDelimiter}\r\n          current={time} \r\n          total={total} \r\n          />\r\n        <Pad className='pad-start-pause' onClick={this.onStartPause} keyCode={SPACE_CODE}>\r\n          <span><Icon type=\"play\" />START</span>\r\n          <span><Icon type=\"pause\" />PAUSE</span>\r\n        </Pad>\r\n        <Pad className='pad-reset' onClick={this.onReset}>\r\n          <span><Icon type=\"stop\" />RESET</span>\r\n        </Pad>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Device;","import React from 'react';\r\nimport './sign.css';\r\n\r\nconst Sign = () => (\r\n  <div className=\"sign-wrapper\">\r\n    <span className=\"sign-title\">Designed & coded by</span>\r\n    <a href=\"https://codepen.io/Dimancmc/full/vaVJBj\" target=\"_blank\" className=\"sign-link\">\r\n        Lytov Dmitry\r\n    </a>\r\n  </div>\r\n);\r\n\r\nexport default Sign;","import React, { Component } from 'react';\r\nimport './app.css';\r\nimport Device from '../../components/device/device';\r\nimport Sign from '../../components/sign/sign';\r\n\r\nconst App = () => (\r\n  <div className=\"app\">\r\n    <Device />\r\n    <Sign />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/app/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faPlay, faPause, faStop } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faPlay, faPause, faStop);\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}